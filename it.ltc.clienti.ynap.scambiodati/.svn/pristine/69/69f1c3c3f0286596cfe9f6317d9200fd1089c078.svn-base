package it.ltc.logic;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeConstants;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.log4j.Logger;

import it.ltc.logica.database.configuration.Database;
import it.ltc.logica.database.orm.EntityManager;
import it.ltc.model.db.DettaglioOrdine;
import it.ltc.model.db.Imballo;
import it.ltc.model.db.Oggetto;
import it.ltc.model.db.Ordine;
import it.ltc.model.db.UbicazioneOggetto;
import it.ltc.model.order.in.Item;
import it.ltc.model.order.in.Items;
import it.ltc.model.order.in.Order;
import it.ltc.model.order.in.Orders;
import it.ltc.model.order.in.Packages;
import it.ltc.model.order.in.Shipment;
import it.ltc.utility.configuration.Configuration;
import it.ltc.utility.ftp.SFTP;
import it.ltc.utility.mail.Email;
import it.ltc.utility.mail.MailMan;

public class InviaEvasioneOrdine {

	private static final Logger logger = Logger.getLogger(InviaEvasioneOrdine.class);

	public static final String ERRORE_QT_DA_IMBALLARE = "La quantità da imballare in RighiOrdine non è 1.";
	public static final String ERRORE_RIGHI_IMBALLO = "Non è stata trovata una corrispondenza esatta in dbo.RighiImballo.";
	public static final String ERRORE_RIGHI_UBICAZIONE = "Non è stata trovata una corrispondenza esatta in dbo.Righiubicpre.";
	public static final String ERRORE_COLLI_PACK = "Non è stata trovata una corrispondenza esatta in dbo.ColliPack.";
	public static final String ERRORE_RIGHI_ORDINE = "La quantità imballata è 0 ma non è stato specificato il motivo per cui non è stato imballato.";

	private EntityManager<Ordine> managerOrdini;
	private EntityManager<DettaglioOrdine> managerDettagli;
	private EntityManager<Imballo> managerImballi;
	private EntityManager<UbicazioneOggetto> managerUbicazioni;
	private EntityManager<Oggetto> managerOggetti;
	// private EntityManager<ColloImballato> managerPacchi;

	private static MailMan postino;

	private Configuration configuration;
	private SFTP ftpClient;

	private String host;
	private String username;
	private String password;
	private String outgoingPath;
	private String localTempFolder;
	private ArrayList<String> destinatariDaAvvisare;

	private DatatypeFactory factory;

	private List<Oggetto> oggettiDaAggiornare;

	private static InviaEvasioneOrdine instance;

	private InviaEvasioneOrdine() {
		setupDB();
		setupConfiguration();
		setupFTP();
		oggettiDaAggiornare = new ArrayList<Oggetto>();
	}

	private void setupDB() {
		managerOrdini = new EntityManager<Ordine>(Ordine.class, Database.YNAP);
		managerDettagli = new EntityManager<DettaglioOrdine>(DettaglioOrdine.class, Database.YNAP);
		managerImballi = new EntityManager<Imballo>(Imballo.class, Database.YNAP);
		managerUbicazioni = new EntityManager<UbicazioneOggetto>(UbicazioneOggetto.class, Database.YNAP);
		managerOggetti = new EntityManager<Oggetto>(Oggetto.class, Database.YNAP);

	}

	private void setupConfiguration() {
		try {
			factory = DatatypeFactory.newInstance();
		} catch (DatatypeConfigurationException e) {
			e.printStackTrace();
		}
	}

	private void setupFTP() {
		try {
			configuration = new Configuration("/resources/configuration.properties", false);
			String email = configuration.get("mail_da_avvisare");
			String[] arrayEmail = email.split(",");
			destinatariDaAvvisare = new ArrayList<String>();
			for (String mail : arrayEmail) {
				destinatariDaAvvisare.add(mail);
			}
			postino = new MailMan(configuration.get("email_mittente_indirizzo"),
					configuration.get("email_mittente_password"), true);
			host = configuration.get("sftp_host");
			username = configuration.get("sftp_username");
			password = configuration.get("sftp_password");
			outgoingPath = configuration.get("outgoing_path");
			localTempFolder = configuration.get("app_ordini_out_path");
			ftpClient = new SFTP(host, username, password);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static InviaEvasioneOrdine getInstance() {
		if (instance == null)
			instance = new InviaEvasioneOrdine();
		return instance;
	}

	private XMLGregorianCalendar convertiData(Date data) {
		if (data == null)
			data = new Date();
		GregorianCalendar dataCalendario = new GregorianCalendar();
		dataCalendario.setTime(data);
		XMLGregorianCalendar dataXML = factory.newXMLGregorianCalendarDate(dataCalendario.get(Calendar.YEAR),
				dataCalendario.get(Calendar.MONTH) + 1, dataCalendario.get(Calendar.DAY_OF_MONTH),
				DatatypeConstants.FIELD_UNDEFINED);
		return dataXML;
	}

	public void inviaEvasioneOrdini() {
		logger.info("Avvio la procedura di invio della conferma degli ordini imballati.");
		Ordine filtroOrdine = new Ordine();
		filtroOrdine.setStato("ELAB");
		List<Ordine> listaOrdini = managerOrdini.getEntities(filtroOrdine);
		logger.info("Stanno per essere elaborati " + listaOrdini.size() + " ordini");
		try {
			for (Ordine ordine : listaOrdini) {
				logger.info("Processo l'ordine: " + ordine.getNumeroOrdine());
				String numeroLista = ordine.getNumeroLista();
				// Oggetto base xml
				Orders radiceXML = new Orders();
				Order ordineXML = new Order();
				radiceXML.setOrder(ordineXML);
				Date dateOrdine = ordine.getDataOrdine();
				ordineXML.setORDDate(convertiData(dateOrdine));
				// TODO - gestire il valore per l'ordine cancellato
				// 0 = not deleted; 1 = deleted by CCare; 2 = deleted for
				// invalid address.
				ordineXML.setORDDeleted(0);
				ordineXML.setORDNote(ordine.getNote());
				ordineXML.setORDNum(ordine.getNumeroOrdine());
				ordineXML.setORDRef(ordine.getPriorità());
				ordineXML.setORDType(ordine.getTipoOrdine());
				// ordineXML.setORDGW(null);
				Shipment spedizione = new Shipment();
				ordineXML.setShipment(spedizione);
				XMLGregorianCalendar dataSpedizione = convertiData(ordine.getDataSpedizione());
				spedizione.setSHIPDate(dataSpedizione);
				HashMap<String, it.ltc.model.order.in.Package> pacchi = new HashMap<String, it.ltc.model.order.in.Package>();
				Items oggetti = new Items();
				ordineXML.setItems(oggetti);
				List<Item> listaOggettiSpediti = oggetti.getItem();
				DettaglioOrdine filtroDettaglio = new DettaglioOrdine();
				filtroDettaglio.setNumeroLista(numeroLista);
				List<DettaglioOrdine> dettagli = managerDettagli.getEntities(filtroDettaglio);
				for (DettaglioOrdine dettaglio : dettagli) {
					// Eseguo le verifiche se posso mandare questo elemento nel
					// riscontro
					String codiceRFID = dettaglio.getSerialeRFID();
					String idUnivocoArticolo = dettaglio.getIdUnivocoArticolo();
					int rigaOrdine = dettaglio.getNumeroRigaOrdine();
					String riferimento = "Lista: " + numeroLista + ", seriale: " + codiceRFID + ". ";
					Item oggettoSpedito = new Item();
					// La quantità da imballare deve essere 1 altrimenti
					// significa che non ho trovato l'oggetto.
					if (dettaglio.getQuantitàDaImballare() == 1) {
						// Se non trovo esattamente un elemento corrispondente
						// in RighiImballo sollevo un'eccezione.
						String idColloImballato = "";
						Imballo filtroImballo = new Imballo();
						filtroImballo.setNumeroLista(numeroLista);
						filtroImballo.setCodiceArticolo(codiceRFID);
						filtroImballo.setQuantitàImballata(1);
						List<Imballo> corrispondenzeImballi = managerImballi.getEntities(filtroImballo);
						if (corrispondenzeImballi.size() != 1) {
							logger.error("l'ordine: " + ordine.getNumeroOrdine()
									+ " ha un errore in righi imballo per il tag " + dettaglio.getSerialeRFID());
							throw new RuntimeException(riferimento + ERRORE_RIGHI_IMBALLO);
						} else {
							Imballo collo = corrispondenzeImballi.get(0);
							idColloImballato = collo.getIdCollo();
							it.ltc.model.order.in.Package pacco = new it.ltc.model.order.in.Package();
							pacco.setPACKID(idColloImballato);
							BigDecimal peso = BigDecimal.ZERO;
							pacco.setPACKWeight(peso);
							pacchi.put(idColloImballato, pacco);
						}
						// Se non trovo esattamente un elemento corrispondente
						// in Righiubcpre sollevo un'eccezione.
						UbicazioneOggetto filtroUbicazione = new UbicazioneOggetto();
						filtroUbicazione.setNumeroLista(numeroLista);
						filtroUbicazione.setIdUnivocoArticolo(idUnivocoArticolo);
						filtroUbicazione.setQuantitàImballata(1);
						List<UbicazioneOggetto> listaUbicazioni = managerUbicazioni.getEntities(filtroUbicazione);
						if (listaUbicazioni.size() != 1) {
							logger.error("l'ordine: " + ordine.getNumeroOrdine()
									+ " ha un errore in righi ubci pre per il tag " + dettaglio.getSerialeRFID());
							throw new RuntimeException(riferimento + ERRORE_RIGHI_UBICAZIONE);
						}
						// Se non trovo esattamente una corrispondenza in
						// ColliPack sollevo un'eccezione.
						Oggetto filtroOggetto = new Oggetto();
						filtroOggetto.setStato("IMBALLATO");
						filtroOggetto.setCodiceRFID(codiceRFID);
						List<Oggetto> listaOggetti = managerOggetti.getEntities(filtroOggetto);
						if (listaOggetti.size() != 1) {
							logger.error("l'ordine: " + ordine.getNumeroOrdine()
									+ " ha un errore in colli pack per il tag " + dettaglio.getSerialeRFID());
							throw new RuntimeException(riferimento + ERRORE_COLLI_PACK);
						} else {
							oggettiDaAggiornare.addAll(listaOggetti);
						}
						oggettoSpedito.setITCodiceMatricola(codiceRFID);
						oggettoSpedito.setITConfDate(dataSpedizione);
						oggettoSpedito.setITPackID(idColloImballato);
						oggettoSpedito.setITRMMID(rigaOrdine);
					} else {
						int codificaOggettoNonTrovato = dettaglio.getCodificaOggettoNonTrovato();
						if (codificaOggettoNonTrovato == 0) {
							codificaOggettoNonTrovato = 1;
							// TODO - Inserito un valore di default (non
							// trovato) perchè sul gestionale non sono pronti.
							logger.error("l'ordine: " + ordine.getNumeroOrdine()
									+ " ha un errore in righi ordine per il tag " + dettaglio.getSerialeRFID());
							// throw new RuntimeException(riferimento +
							// ERRORE_RIGHI_ORDINE);
						}
						oggettoSpedito.setITRMMID(rigaOrdine);
						oggettoSpedito.setITCodiceMatricola(codiceRFID);
						oggettoSpedito.setITNotShippedNote(dettaglio.getNoteOggettoNonTrovato());
						oggettoSpedito.setITNotShippedType(Integer.toString(codificaOggettoNonTrovato));
					}
					listaOggettiSpediti.add(oggettoSpedito);
				}
				// Aggiungo tutti i colli trovati
				Packages contenitorePacchi = new Packages();
				spedizione.setPackages(contenitorePacchi);
				List<it.ltc.model.order.in.Package> listaPacchi = contenitorePacchi.getPackage();
				for (String key : pacchi.keySet()) {
					it.ltc.model.order.in.Package pacco = pacchi.get(key);
					listaPacchi.add(pacco);
				}
				// Genero l'xml e lo metto sul server SFTP YNAP
				boolean successo = generaXML(radiceXML);
				// Se tutto è andato a buon fine eseguo gli update richiesti
				if (successo) {
					// testata ordini stato ELAB -> SPED
					ordine.setStato("SPED");
					managerOrdini.update(ordine);
					// colli pack stato IMBALLATO -> TRASMESSO
					for (Oggetto oggetto : oggettiDaAggiornare) {
						oggetto.setStato("TRASMESSO");
						managerOggetti.update(oggetto);
					}
				}
			}
		} catch (RuntimeException e) {
			// Notifico l'eccezione.
			logger.error(e);
			String oggettoMail = "Alert: eccezione nell'invio dell'evasione dell'ordine YNAP";
			String corpoMail = "Errore riscontrato: " + e.getMessage();
			Email mail = new Email(oggettoMail, corpoMail);
			postino.invia(destinatariDaAvvisare, mail);
		}
	}

	private boolean generaXML(Orders radiceXML) {
		boolean successo = false;
		try {
			Thread.sleep(1000); //Inserito per far si che anche se vengono processate liste molto piccole e il tempo impiegato sia minore di un secondo i file in uscita abbiano sempre nomi diversi.
			Date oggi = new Date();
			SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
			String dataFormattata = formatter.format(oggi);
			File xml = new File(localTempFolder + "xy" + dataFormattata + ".orders.xml");
			JAXBContext jaxbContext = JAXBContext.newInstance(Orders.class);
			Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
			jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, new Boolean(true));
			jaxbMarshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, "/resources/schWhOrdersInbound.xsd");
			jaxbMarshaller.marshal(radiceXML, xml);
			successo = ftpClient.upload(xml.getAbsolutePath(), outgoingPath);
		} catch (JAXBException e) {
			e.printStackTrace();
			logger.error("Errore nella generazione dell'XML.", e);
		} catch (InterruptedException e) {
			e.printStackTrace();
			logger.error("Errore nella generazione dell'XML.", e);
		}
		return successo;
	}

}
